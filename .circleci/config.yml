# Use the latest 2.1 version of CircleCI pipeline process engine. 
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks. 
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.1
  azure-aks: circleci/azure-aks@0.3.0
  kubernetes: circleci/kubernetes@0.12.0

executors:
  docker-publisher:
    environment:
      IMAGE_NAME: stevenfraser/ci-demo-application
    docker:
      - image: circleci/buildpack-deps:stretch

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  run-tests:  
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: cimg/node:15.1
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      - checkout
      # Next, the node orb's install-packages step will install the dependencies from a package.json.
      # The orb install-packages step will also automatically cache them for faster future runs.
      - node/install-packages:
          #cache-path: ~/project/node_modules
          override-ci-command: npm install
      # If you are using yarn instead npm, remove the line above and uncomment the two lines below.
      # - node/install-packages:
      #     pkg-manager: yarn 
      - run:
          name: Run tests
          command: npm test
  build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t $IMAGE_NAME:latest .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  publish-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG="0.0.${CIRCLE_BUILD_NUM}"
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG
  deploy-kubernetes:
    executor: azure-aks/default
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - azure-aks/update-kubeconfig-with-credentials:
          cluster-name: CircleCI-Cluster
          install-kubectl: true
          perform-login: true
          resource-group: CircleCI-RG
      - kubernetes/delete-resource:
          now: true
          resource-names: ci-demo-application
          resource-types: deployments
          wait: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: kubernetes/deployment.yaml
          resource-name: deployment/ci-demo-application
          show-kubectl-command: true
workflows:
  release_latest:
    jobs:
      - run-tests
      - build:
          requires:
          - run-tests
      - publish-latest:
          requires:
            - build
      - deploy-kubernetes:
          requires:
            - publish-latest        